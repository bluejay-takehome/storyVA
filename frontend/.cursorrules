# ShipFast SaaS Boilerplate - Cursor Rules (Updated for Next.js 15 + Tailwind v4 + DaisyUI v5)

You are an expert full-stack developer working on ShipFast, a Next.js SaaS boilerplate with the latest tech stack.

## 🚀 Current Tech Stack (Updated)
- **Next.js**: 15.1.3 with React 19 and Turbopack
- **React**: 19.0.0 (latest stable)
- **Tailwind CSS**: 4.0.0 (CSS-based configuration)
- **DaisyUI**: 5.0.50 (latest with new component system)
- **Supabase**: Latest SSR package with async cookies support
- **Stripe**: 17.3.1 (latest API)

## ⚠️ Critical Rules to Eliminate Warnings

### 1. **Supabase Client Usage**
```javascript
// ❌ WRONG - Will cause async cookies warning
const supabase = createClient();

// ✅ CORRECT - Always await in server components
const supabase = await createClient();

// ✅ CORRECT - Client components use different import
import { createClient } from "@/libs/supabase/client"; // For client components
import { createClient } from "@/libs/supabase/server"; // For server components (async)
```

### 2. **Next.js 15 Headers API**
```javascript
// ❌ WRONG - Synchronous headers access
const signature = headers().get("stripe-signature");

// ✅ CORRECT - Always await headers in Next.js 15
const signature = (await headers()).get("stripe-signature");
```

### 3. **Import Cleanup Rules**
- Remove unused imports immediately
- Use specific imports instead of wildcard imports
- Comment out imports in commented code blocks

```javascript
// ❌ WRONG - Unused import
import { createClient } from "@/libs/supabase/server";
// const supabase = createClient(); // commented out

// ✅ CORRECT - Move import inside comment or remove
// const { createClient } = require("@/libs/supabase/server");
// const supabase = createClient();
```

### 4. **React Hooks Dependencies**
```javascript
// ❌ WRONG - Missing dependencies
useEffect(() => {
  supabase.auth.getUser();
}, []); // Missing supabase dependency

// ✅ CORRECT - Include all dependencies or move inside useEffect
useEffect(() => {
  const supabase = createClient();
  supabase.auth.getUser();
}, []); // No external dependencies
```

### 5. **Tailwind CSS v4 Utilities**
```css
/* ❌ WRONG - Pseudo-selectors in @utility */
@utility btn-gradient:hover {
  filter: saturate(1.2);
}

/* ✅ CORRECT - Separate CSS rules for pseudo-selectors */
@utility btn-gradient {
  background: var(--color-gradient);
}

.btn-gradient:hover {
  filter: saturate(1.2);
}
```

### 6. **DaisyUI v5 Theme Configuration**
```css
/* ✅ CORRECT - New v5 syntax */
@import "tailwindcss";
@plugin "daisyui";

@theme {
  --color-primary: oklch(49.12% 0.309 275.75);
  --color-gradient: linear-gradient(60deg, #f79533, #f37055, #ef4e7b, #a166ab, #5073b8, #1098ad, #07b39b, #6fba82);
}
```

### 7. **Environment Variable Checks**
```javascript
// ✅ ALWAYS check env vars before using them
export async function POST(req) {
  if (!process.env.STRIPE_SECRET_KEY || !process.env.STRIPE_WEBHOOK_SECRET) {
    return NextResponse.json({ error: "Server configuration error" }, { status: 500 });
  }
  
  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
    apiVersion: "2023-08-16",
  });
}
```

## 📁 File Structure & Naming

### API Routes (App Router)
```
app/api/[endpoint]/route.js
- Always use async/await for database operations
- Always await createClient() for Supabase
- Always await headers() for Next.js 15
- Include error handling with proper status codes
```

### Components
```
components/ComponentName.js
- Use "use client" for interactive components
- Use async server components for data fetching
- Import from @/config for app settings
- Use absolute imports with @/ prefix
```

## 🎨 Styling Rules

### Tailwind CSS v4 Syntax
```css
/* Import and plugin setup */
@import "tailwindcss";
@plugin "daisyui";

/* Theme variables */
@theme {
  --color-custom: #ff0000;
  --size-custom: 1rem;
}

/* Custom utilities */
@utility custom-class {
  property: value;
}

/* Pseudo-selectors as separate rules */
.custom-class:hover {
  property: value;
}
```

### DaisyUI v5 Component Usage
```html
<!-- ✅ Use new v5 class names -->
<div class="card card-border"> <!-- v5: card-border instead of card-bordered -->
<div class="card card-sm"> <!-- v5: card-sm instead of card-compact -->
<button class="btn btn-primary btn-sm"> <!-- Responsive modifiers work -->

<!-- ✅ New responsive syntax -->
<button class="btn btn-primary md:btn-lg lg:btn-xl">Responsive Button</button>
```

## 🔧 Performance & Best Practices

### Server Components (Default)
```javascript
// ✅ Server component with data fetching
export default async function Page() {
  const supabase = await createClient();
  const { data } = await supabase.from('table').select('*');
  
  return <div>{/* JSX */}</div>;
}
```

### Client Components (Interactive)
```javascript
"use client";
import { useState, useEffect } from "react";
import { createClient } from "@/libs/supabase/client";

export default function InteractiveComponent() {
  const [data, setData] = useState(null);
  const supabase = createClient(); // Client-side, no await needed
  
  useEffect(() => {
    // Fetch data
  }, []);
  
  return <div>{/* Interactive JSX */}</div>;
}
```

## 🚫 Common Mistakes to Avoid

1. **DON'T** use synchronous `headers()` or `cookies()` in Next.js 15
2. **DON'T** import unused dependencies
3. **DON'T** use old Tailwind v3 `@tailwind` directives with v4
4. **DON'T** use old DaisyUI v4 theme import paths
5. **DON'T** use `createClient()` without await in server components
6. **DON'T** mix server and client component patterns
7. **DON'T** use deprecated `domains` in next.config.js (use `remotePatterns`)

## 🎯 Commit Message Format
Use Conventional Commits:
- `feat:` for new features
- `fix:` for bug fixes  
- `refactor:` for code refactoring
- `style:` for formatting changes
- `docs:` for documentation
- `perf:` for performance improvements

## 🔍 Before Committing Checklist
- [ ] No unused imports
- [ ] All async functions properly awaited
- [ ] No ESLint warnings
- [ ] Build passes (`npm run build`)
- [ ] All environment variables checked
- [ ] Proper error handling in API routes
- [ ] Server/client components used correctly

## 🛠️ Development Commands
```bash
npm run dev          # Development with Turbopack
npm run build        # Production build
npm run lint         # ESLint check
npm run lint:fix     # Auto-fix ESLint issues
```

Remember: This codebase uses the latest Next.js 15, React 19, Tailwind v4, and DaisyUI v5. Always follow the new patterns and APIs for these versions. 